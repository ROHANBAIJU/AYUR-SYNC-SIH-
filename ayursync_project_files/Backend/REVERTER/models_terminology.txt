# src/models/terminology.py

from pydantic import BaseModel, Field
from typing import List, Optional

class Terminology(BaseModel):
    """
    Represents a single terminology entry from the NAMASTE CSV.
    """
    code: str = Field(..., example="ASU25.14", description="The unique code for the term.")
    term: str = Field(..., example="Gridhrasi", description="The display name of the term.")
    
    class Config:
        from_attributes = True # Renamed from orm_mode for Pydantic v2

class ConceptMapping(BaseModel):
    """
    Represents a single mapping from a source code to a target code.
    """
    source_code: str = Field(..., example="ASU25.14", description="The source code (e.g., NAMASTE).")
    target_code: str = Field(..., example="ICD11-M54.3", description="The target code (e.g., ICD-11).")
    target_term: str = Field(..., example="Sciatica", description="The display name of the target term.")

class TranslationResult(BaseModel):
    """
    Represents the result of a successful translation operation.
    This is the data structure that our /translate endpoint will return.
    """
    found: bool = Field(True, description="Indicates if a mapping was found.")
    source_term: Terminology
    target_term: Optional[Terminology] = None # Optional in case no mapping exists



**** models/terminolgy